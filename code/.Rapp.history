dim(bcsim)
lo=hi=NULL#
for (i in 1:165)#
{lo=quantile(bcsim[i,],.025)#
hi=quantile(bcsim[i,],.975)}
quartz()
plot(berkeley.years,berkeley,type="l",lwd=2)
lines(berkeley.years,berkeley.bc,col="red",lwd=2)
lines(berkeley.years,hi,col="red")
length(hi)
lo=hi=NULL#
for (i in 1:165)#
{lo=c(lo,quantile(bcsim[i,],.025))#
hi=c(hi,quantile(bcsim[i,],.975))}
lines(berkeley.years,hi,col="red")
lines(berkeley.years,lo,col="red")
N=10000#
bcsim=NULL#
for(i in 1:N){tryCatch(#
{inn=sample(innov)#
path=arima.sim(list(ar=c(-0.3259366, 0.3886687, 0.1176103 ,0.2811755),ma=0.8170118),n=length(berkeley),n.start=2000,#
innov=inn)#
path=predict(berk.gls2,newdata=data.frame(yrs))+berkeley.sd*inn#
#
bcar=bentcable.ar(path,p=4,init.cable=c(-1.2677,0.0004864,0.0135112,99,66.4))#
bctmp=NULL#
for(i in 0:164) bctmp=c(bctmp,fullcable.t(i,bcar$cable$est[1],bcar$cable$est[2],bcar$cable$est[3],bcar$cable$est[4],bcar$cable$est[5]))#
bcsim=cbind(bcsim,bctmp)#
})}#
#
lo=hi=NULL#
for (i in 1:165)#
{lo=c(lo,quantile(bcsim[i,],.025))#
hi=c(hi,quantile(bcsim[i,],.975))}
par(mfrow=c(1,1))
plot(range(berkeley.years),range(c(berkeley-2*berkeley.sd,berkeley+2*berkeley.sd)),type="n",xlab="Year",ylab="Temperature anomaly (°C)")#
lines(berkeley.years,berkeley,lwd=2)
lines(berkeley.years,berkeley.bc,col="red",lwd=2)
lines(berkeley.years,lo,lty=2,col="red")#
lines(berkeley.years,hi,lty=2,col="red")
lines(berkeley.years,fitted(berk.gls2),col="darkgreen",lwd=2
)
.025/165
.0001515*10000
for (i in 1:165)#
{blo=c(blo,quantile(bcsim[i,],.025/165))#
bhi=c(bhi,quantile(bcsim[i,],1-.025/165))}#
lines(berkeley.years,blo,lty=3,col="darkgreen")#
lines(berkeley.years,bhi,lty=3,col="darkgreen")
blo=bhi=NULL#
for (i in 1:165)#
{blo=c(blo,quantile(bcsim[i,],.025/165))#
bhi=c(bhi,quantile(bcsim[i,],1-.025/165))}#
lines(berkeley.years,blo,lty=3,col="darkgreen")#
lines(berkeley.years,bhi,lty=3,col="darkgreen")
range(blo
)
lines(berkeley.years,blo,lty=3,col="darkgreen")#
lines(berkeley.years,bhi,lty=3,col="darkgreen")
lines(berkeley.years,blo)
length(blo)
range(bhi)
abline(h=0)
q()
ls()
berkeley.years
b7099=berkeley[121:150]
b7099.sd=berkeley.sd[121:150]
b7099.yrs=berkeley.yrs[121:150]
b7099.yrs=berkeley.years[121:150]
plot(b7099.yrs,b7099,type="l")
for(i in 1:30) {
segments(b7099.yrs[i],b7099[i]-2*b7099.sd[i],b7099.yrs[i],b7099[i]+2*b7099.sd[i])}
b7099.wls=lm(b7099~b7099.yrs,wei=b7099.sd^{-2})
abline(b7099.wls)
require(forecast)
auto.arima(b7099.wls$res)
ar(b7099.wls$res)
auto.arima(b7099.wls$res,ste=F,app=F)
arima(b7099.wls$res)
mean(b7099.wls$res)
acf(b7099.wls$res)
14*.05
arima(b7099.wls$res,c(6,0,0))
median(c(3.6,4.0,4.0,3.5,3.6,3.8,4.0,4.0,3.5,3.9,3.7,3.8,3.8,4.0,4.0,2.8,3.3,3.7,3.7)
)
mean(c(3.6,4.0,4.0,3.5,3.6,3.8,4.0,4.0,3.5,3.9,3.7,3.8,3.8,4.0,4.0,2.8,3.3,3.7,3.7))
sd(c(3.6,4.0,4.0,3.5,3.6,3.8,4.0,4.0,3.5,3.9,3.7,3.8,3.8,4.0,4.0,2.8,3.3,3.7,3.7))
ctiation()
aitation{}
citation()
nyrs=36#
ndays=31#
p=1-.2907 #probability of rain#
#
simpath=matrix(rbinom(36*31,p),ncols=31)#
count=function(vector)#
	{tmp=matrix(,2,2)#
	  for i in (1:(length(vector)-1)#
			{tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1}#
			return(tmp)#
			}#
simcount=NULL#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])
count(simpath[i,])
simpath[i,]
simpath=matrix(rbinom(36*31,p),ncol=31)
simpath=matrix(rbinom(36*31,1,p),ncol=31)
simpath[i,]
tmp=matrix(,2,2)
tmp
vec=simpath[i,]
length(vec)
i
for (i in 1:30)
tmp[vec[i]+1,vec[i+1]+1]
vec[i]+1,vec[i+1]+1
c(vec[i]+1,vec[i+1]+1)
vec
count=function(vector)#
	{#
		tmp=matrix(,2,2)#
	  for (i in (1:(length(vector)-1)#
			{tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1}#
			return(tmp)#
			}
count=function(vector)#
	{#
		tmp=matrix(,2,2)#
	  for (i in (1:(length(vector)-1))#
			{tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1}#
			return(tmp)#
			}
count=function(vector)#
	{#
		tmp=matrix(,2,2)#
	  for (i in (1:(length(vector)-1)))#
			tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1#
			return(tmp)#
			}
simcount=NULL#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])
simcount=matrix(,2,2)#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])
simcount
i
count(simpath[i,])
simpath[i,]
v=simpath[i,]
v
count(v)
count=function(vector)#
	{#
		tmp=matrix(0,2,2)#
	  for (i in (1:(length(vector)-1)))#
			tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1#
			return(tmp)#
			}
count(v)
simcount=matrix(0,2,2)#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])
simcount
nyrs=36#
ndays=31#
p=1-.2907 #probability of rain#
N=100#
ar=array(0,c(N,2,2))#
#
for(j in (1:N))#
{#
simpath=matrix(rbinom(nyrs*ndays,1,p),ncol=ndays)#
count=function(vector)#
	{#
		tmp=matrix(0,2,2)#
	  for (i in (1:(length(vector)-1)))#
			tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1#
			return(tmp)#
			}#
simcount=matrix(0,2,2)#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])#
ar[j,]=simcount#
}
nyrs=36#
ndays=31#
p=1-.2907 #probability of rain#
N=100#
ar=array(0,c(N,2,2))#
#
for(j in (1:N))#
{#
simpath=matrix(rbinom(nyrs*ndays,1,p),ncol=ndays)#
count=function(vector)#
	{#
		tmp=matrix(0,2,2)#
	  for (i in (1:(length(vector)-1)))#
			tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1#
			return(tmp)#
			}#
simcount=matrix(0,2,2)#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])#
ar[j,,]=simcount#
}
ar[1,,]
ar[,1,1]
par(mfrow=c(2,2))
hist(ar[,1,1],main="DD")
hist(ar[,1,2],main="DW")
hist(ar[,2,1],main="WD")
hist(ar[,2,2],main="WW")
nyrs=36#
ndays=31#
p=1-.2907 #probability of rain#
N=1000#
ar=array(0,c(N,2,2))#
#
for(j in (1:N))#
{#
simpath=matrix(rbinom(nyrs*ndays,1,p),ncol=ndays)#
count=function(vector)#
	{#
		tmp=matrix(0,2,2)#
	  for (i in (1:(length(vector)-1)))#
			tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1#
			return(tmp)#
			}#
simcount=matrix(0,2,2)#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])#
ar[j,,]=simcount#
}#
#
par(mfrow=c(2,2))#
hist(ar[,1,1],main="DD")#
hist(ar[,1,2],main="DW")#
hist(ar[,2,1],main="WD")#
hist(ar[,2,2],main="WW")
nyrs=36#
ndays=31#
p=1-.2907 #probability of rain#
N=100000#
ar=array(0,c(N,2,2))#
#
for(j in (1:N))#
{#
simpath=matrix(rbinom(nyrs*ndays,1,p),ncol=ndays)#
count=function(vector)#
	{#
		tmp=matrix(0,2,2)#
	  for (i in (1:(length(vector)-1)))#
			tmp[vector[i]+1,vector[i+1]+1]=tmp[vector[i]+1,vector[i+1]+1]+1#
			return(tmp)#
			}#
simcount=matrix(0,2,2)#
for(i in 1:nyrs) simcount=simcount+count(simpath[i,])#
ar[j,,]=simcount#
}#
#
par(mfrow=c(2,2))#
hist(ar[,1,1],main="DD")#
hist(ar[,1,2],main="DW")#
hist(ar[,2,1],main="WD")#
hist(ar[,2,2],main="WW")
mean(ar[,1,1])
mean(ar[,1,2])
mean(ar[,2,1])
mean(ar[,2,2])
36*31*p^2
36*30*p^2
sd(ar[,1,1])
sd(ar[,1,2])
sd(ar[,2,1])
sd(ar[,2,2])
sqrt(36*30*p^2(1-p^2))
sqrt(36*30*p^2*(1-p^2))
22.09^2/36/30
(1-p)^2
points(643,0)
range(ar[,2,2])
help(hist)
library(sorvi)
coast1 <- sorvi::LoadMML(data.id = "coast", resolution = "4_5_milj_shape_etrs-tm35fin")
gadm <- GetGADM(“FIN_adm”, “Kunta”)
gadm <- GetGADM(“FIN_adm”)
?GetGADM
??GetGADM
library(rgeos)#
library(rgdal)
library(rgeos)
gadm <- GetGADM(“FIN_adm”, “Kunta”)
municipality.info.mml <- get_municipality_info_mml()
plot(municipality.info.mml)
spplot(municipality.info.mml)
names(municipality.info.mml)
spplot(municipality.info.mml[14])
spplot(municipality.info.mml[[14]])
finland=read.table("~/GitHub/SeaLevelProjections/Finland.PSMSL.txt")#All Finnish sea level stations with current data#
#from PSMSL.org#
finland[,1]=as.character(finland[,1])
finlandurl=paste("http://www.psmsl.org/data/obtaining/rlr.monthly.data/",finland[,2],".rlrdata",sep="")
mymap=map("world",xlim=c(20,28),ylim=c(59,68))#
plot(mymap)
library(maps)#
library(maptools)#
mymap=map("world",xlim=c(20,28),ylim=c(59,68))#
plot(mymap)
plot(mymap,type="l"))
plot(mymap,type="l")
?map
mymap=map("world",regions="Finland")#
plot(mymap,type="l")
plot(mymap,type="l",axes=F,box=F)
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Finland")
points(finland[,4],finland[,3],col="blue")#
text(finland[,4],finland[,3],finland[,1],pos=4)
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Finland")#
 points(finland[,4],finland[,3],col="blue")#
text(finland[,4],finland[,3],finland[,1],pos=4,cex=0.5)
finlandurl=paste("http://www.psmsl.org/data/obtaining/rlr.monthly.data/",finland[,2],".rlrdata",sep="")#
#
N=length(finland[,2])#
finlanddata=list(N,NULL)#
#
for (i in 1:N){#
	tmp=read.table(finlandurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmpi[,2:4])#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(kemi.mp$overall+outer(kemi.mp$row,kemi.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")#
	finlanddata[i]=list(data.frame(name=finland[i,1],years=unique(floor(tmp[,1])),data=tmp.ann)#
	}
for (i in 1:N){#
	tmp=read.table(finlandurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmpi[,2:4])#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(kemi.mp$overall+outer(kemi.mp$row,kemi.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")#
	finlanddata[i]=list(data.frame(name=finland[i,1],years=unique(floor(tmp[,1])),data=tmp.ann))#
	}
for (i in 1:N){#
	tmp=read.table(finlandurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmp[,2:4])#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(tmp.mp$overall+outer(kemi.mp$row,kemi.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")#
	finlanddata[i]=list(data.frame(name=finland[i,1],years=unique(floor(tmp[,1])),data=tmp.ann))#
	}
for (i in 1:N){#
	tmp=read.table(finlandurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmp[,2:4])#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(tmp.mp$overall+outer(tmp.mp$row,tmp.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")#
	finlanddata[i]=list(data.frame(name=finland[i,1],years=unique(floor(tmp[,1])),data=tmp.ann))#
	}
par(mfrow=c(3,4))
N
for(i in 1:N) plot(finlanddata[i]$years,finlanddata[i]$data,type="l",main=finlanddata[i]$name)
finlanddata[1]
for(i in 1:N) plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l",main=finlanddata[[i]]$name)
par(mfrow=c(2,2)
)
for (i in 1:4) plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l",main=finlanddata[[i]]$name)
for (i in 1:4) plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l",main=finlanddata[[i]]$name[1])
for (i in 1:4) plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l")
i
plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l",main=finlanddata[[i]]$name[1]
)
finlanddata[[i]]$years
finlanddata[[i]]$data
par(mfrow=c(1,1)
)
plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l")
finlanddata[[i]]$name
finlanddata[[i]]$name[1]
title(main=finlanddata[[i]]$name[1])
library(maps)#
library(maptools)#
mymap=map("world",regions="Finland")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Finland")#
 points(finland[,4],finland[,3],col="blue")#
text(finland[,4],finland[,3],finland[,1],pos=4,cex=0.5)
require(forecast)#
require(excursions)#
require(Matrix)#
require(chron)#
require(zoo)#
source('~/GitHub/SeaLevelProjections/Sealevel_functions.R', chdir = TRUE)#
source('~/GitHub/SeaLevelProjections/ci.R', chdir = TRUE)#
pdf("norway.pdf")#
norway=read.table("~/GitHub/SeaLevelProjections/Norway_sea_level/Norway.PSMSL.txt")#All Norwegian sea level stations with current data]#
#from PSMSL.org#
norway[,1]=as.character(norway[,1])#
#
mymap=map("world",regions="norway")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
require(forecast)#
require(excursions)#
require(Matrix)#
require(chron)#
require(zoo)#
source('~/GitHub/SeaLevelProjections/Sealevel_functions.R', chdir = TRUE)#
source('~/GitHub/SeaLevelProjections/ci.R', chdir = TRUE)#
#pdf("norway.pdf")#
norway=read.table("~/GitHub/SeaLevelProjections/Norway_sea_level/Norway.PSMSL.txt")#All Norwegian sea level stations with current data]#
#from PSMSL.org#
norway[,1]=as.character(norway[,1])#
#
mymap=map("world",regions="norway")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
require(maps)#
require(maptools)#
require(ncdf4)#
require(forecast)#
require(excursions)#
require(Matrix)#
require(chron)#
require(zoo)#
source('~/GitHub/SeaLevelProjections/Sealevel_functions.R', chdir = TRUE)#
source('~/GitHub/SeaLevelProjections/ci.R', chdir = TRUE)#
#pdf("norway.pdf")#
norway=read.table("~/GitHub/SeaLevelProjections/Norway_sea_level/Norway.PSMSL.txt")#All Norwegian sea level stations with current data]#
#from PSMSL.org#
norway[,1]=as.character(norway[,1])#
#
mymap=map("world",regions="norway")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
plot(mymap,type="l",axes=F,xlab="",ylab="",main="norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
mymap=map("world",regions=""Norway(?!:Svalbard")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
mymap=map("world",regions="Norway!:Svalbard")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
mymap=map("world",regions="Norway(?!:Svalbard")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
mymap=map("world",regions="Norway(?!:Svalbard")
mymap=map("world",regions="Norway(?!:Svalbard)")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)
norwayurl=paste("http://www.psmsl.org/data/obtaining/rlr.monthly.data/",norway[,2],".rlrdata",sep="")#
#
N=length(norway[,2])#
norwaydata=list(N,NULL)#
#
for (i in 1:N){#
	tmp=read.table(norwayurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmp[,2:4])#
#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[N,2]<12) tmp=tmp[-((N+1-tmp[N,2]):N),]#delete final year if not full#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(tmp.mp$overall+outer(tmp.mp$row,tmp.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")/10 #cm#
	tmp.yrs=unique(floor(tmp[,1]))#
	tmp.ann=tmp.ann-mean(tmp.ann[which(is.element(tmp.yrs,1970:1999))],na.rm=T)#
	norwaydata[i]=list(data.frame(years=unique(floor(tmp[,1])),data=tmp.ann))#
	}
warnings()
tmp
tmp.ann
u=0.5
1/(u-1)
-6-6/(u-2)
u=4/3
1/(4/3-1)
-6-6/(u-2)
3*(2/3)9
3*(2/3)^9
t=1:100
215*t-16*t^2
t=t/100215*t-16*t^2
t
t=(1:100)/100
215*t-16*t^2
t[32]
t=1:100
215*t-16*t^2
t=(1200:1400)/100
215*t-16*t^2
t(113)
t[113]
t=13.12
215*t-16*t^2
t=(1200:1400)/100
t[98]
t=12.97
t=(1200:1400)/100
t=12.97215*t-16*t^2
t=12.97
215*t-16*t^2
t=0.32
215*t-16*t^2
t=0.47
215*t-16*t^2
require(maps)#
require(maptools)#
require(ncdf4)#
require(forecast)#
require(excursions)#
require(Matrix)#
require(chron)#
require(zoo)#
source('~/GitHub/SeaLevelProjections/Sealevel_functions.R', chdir = TRUE)#
source('~/GitHub/SeaLevelProjections/ci.R', chdir = TRUE)#
#pdf("norway.pdf")#
norway=read.table("~/GitHub/SeaLevelProjections/Norway_sea_level/Norway.PSMSL.txt")#All Norwegian sea level stations with current data]#
#from PSMSL.org#
norway[,1]=as.character(norway[,1])#
#
mymap=map("world",regions="Norway(?!:Svalbard)")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)#
#
norwayurl=paste("http://www.psmsl.org/data/obtaining/rlr.monthly.data/",norway[,2],".rlrdata",sep="")#
#
N=length(norway[,2])#
norwaydata=list(N,NULL)#
#
for (i in 1:N){#
	tmp=read.table(norwayurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmp[,2:4])#
#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[N,2]<12) tmp=tmp[-((N+1-tmp[N,2]):N),]#delete final year if not full#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(tmp.mp$overall+outer(tmp.mp$row,tmp.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")/10 #cm#
	tmp.yrs=unique(floor(tmp[,1]))#
	tmp.ann=tmp.ann-mean(tmp.ann[which(is.element(tmp.yrs,1970:1999))],na.rm=T)#
	norwaydata[i]=list(data.frame(years=unique(floor(tmp[,1])),data=tmp.ann))#
	}#
	#Check for missing years#
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data))))
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data)),norwaydata[[i]]$years[1]))
t=1:100
45-5*t-5*t^2
t=(200:300)/100
45-5*t-5*t^2
t(55)
t[55]
t=(100:200)/100
45-5*t-5*t^2
N
for(i in 1:N)#
plot(finlanddata[[i]]$years,finlanddata[[i]]$data,type="l",xlab="",ylab=finland[i,1]
)
par(mfrow=c(4,3))#
for(i in 1:N)#
plot(norwaydata[[i]]$years,norwaydata[[i]]$data,type="l",xlab="",ylab=norway[i,1])
par(mfrow=c(4,3))#
for(i in 1:N)#
plot(norwaydata[[i]]$years,norwaydata[[i]]$data,type="l",xlab="",ylab="")
par("mar")
par(mar=c(1,1,1,1))
for(i in 1:N)#
plot(norwaydata[[i]]$years,norwaydata[[i]]$data,type="l",xlab="",ylab="")
norway[,1]
index=c(4,11,13,16,17,20)
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data)),norwaydata[[i]]$years[1]))
#deal with Oslo missing data before 1916#
sta.years=norwaydata[[20]]$years#
sta=norwaydata[[20]]$data#
sta.range=which(is.element(sta.years,1916:2013))#
sta.years=sta.years[sta.range] #
sta=sta[sta.range]#
norwaydata[[20]]$data=sta#
norwaydata[[20]]$years=sta.years#
#
	#Check for missing years#
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data)),norwaydata[[i]]$years[1]))#
#
index=c(4,11,13,16,20)#sufficient data + having gia #
gia.NO=c(0.3,0.45,0.18,0.26,0.54)#
giase.NO=c(0.06,0.07,0.06,0.07,0.06)#
#
for(i in index)#
 {m=length(finlanddata[[i]]$data)-1#
 reg=0:m#
 adj=mean(reg[which(is.element(finlanddata[[i]]$years,1970:1999))])#
reg=reg-adj#
	newdata=finlanddata[[i]]$data+gia.FI[i]*reg#
plot(range(finlanddata[[i]]$years),range(c(finlanddata[[i]]$data,newdata),na.rm=T),type="n",xlab="Year",ylab=finland[i,1])#
lines(finlanddata[[i]]$years,finlanddata[[i]]$data)#
lines(finlanddata[[i]]$years,newdata,col="red")#
}
require(maps)#
require(maptools)#
require(ncdf4)#
require(forecast)#
require(excursions)#
require(Matrix)#
require(chron)#
require(zoo)#
source('~/GitHub/SeaLevelProjections/Sealevel_functions.R', chdir = TRUE)#
source('~/GitHub/SeaLevelProjections/ci.R', chdir = TRUE)#
#pdf("norway.pdf")#
norway=read.table("~/GitHub/SeaLevelProjections/Norway_sea_level/Norway.PSMSL.txt")#All Norwegian sea level stations with current data]#
#from PSMSL.org#
norway[,1]=as.character(norway[,1])#
#
mymap=map("world",regions="Norway(?!:Svalbard)")#
plot(mymap,type="l",axes=F,xlab="",ylab="",main="Norway")#
points(norway[,4],norway[,3],col="blue")#
text(norway[,4],norway[,3],norway[,1],pos=4,cex=0.5)#
#
norwayurl=paste("http://www.psmsl.org/data/obtaining/rlr.monthly.data/",norway[,2],".rlrdata",sep="")#
#
N=length(norway[,2])#
norwaydata=list(N,NULL)#
#
for (i in 1:N){#
	tmp=read.table(norwayurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmp[,2:4])#
#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[N,2]<12) tmp=tmp[-((N+1-tmp[N,2]):N),]#delete final year if not full#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(tmp.mp$overall+outer(tmp.mp$row,tmp.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")/10 #cm#
	tmp.yrs=unique(floor(tmp[,1]))#
	tmp.ann=tmp.ann-mean(tmp.ann[which(is.element(tmp.yrs,1970:1999))],na.rm=T)#
	norwaydata[i]=list(data.frame(years=unique(floor(tmp[,1])),data=tmp.ann))#
	}#
	par(mfrow=c(4,3))#
for(i in 1:N)#
plot(norwaydata[[i]]$years,norwaydata[[i]]$data,type="l",xlab="",ylab="")#
#
#deal with Oslo missing data before 1916#
sta.years=norwaydata[[20]]$years#
sta=norwaydata[[20]]$data#
sta.range=which(is.element(sta.years,1916:2013))#
sta.years=sta.years[sta.range] #
sta=sta[sta.range]#
norwaydata[[20]]$data=sta#
norwaydata[[20]]$years=sta.years#
#
	#Check for missing years#
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data)),norwaydata[[i]]$years[1]))#
#
index=c(4,11,13,16,20)#sufficient data + having gia #
gia.NO=c(0.3,0.45,0.18,0.26,0.54)#
giase.NO=c(0.06,0.07,0.06,0.07,0.06)#
#
for(i in index)#
 {m=length(norwaydata[[i]]$data)-1#
 reg=0:m#
 adj=mean(reg[which(is.element(norwaydata[[i]]$years,1970:1999))])#
reg=reg-adj#
	newdata=norwaydata[[i]]$data+gia.FI[i]*reg#
plot(range(norwaydata[[i]]$years),range(c(norwaydata[[i]]$data,newdata),na.rm=T),type="n",xlab="Year",ylab=norway[i,1])#
lines(norwaydata[[i]]$years,norwaydata[[i]]$data)#
lines(norwaydata[[i]]$years,newdata,col="red")#
}
#deal with Oslo missing data before 1916#
sta.years=norwaydata[[20]]$years#
sta=norwaydata[[20]]$data#
sta.range=which(is.element(sta.years,1916:2013))#
sta.years=sta.years[sta.range] #
sta=sta[sta.range]#
norwaydata[[20]]=list(data=sta,years=sta,years#
#
	#Check for missing years#
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data)),norwaydata[[i]]$years[1]))#
#
index=c(4,11,13,16,20)#sufficient data + having gia #
gia.NO=c(0.3,0.45,0.18,0.26,0.54)#
giase.NO=c(0.06,0.07,0.06,0.07,0.06)#
#
for(i in index)#
 {m=length(norwaydata[[i]]$data)-1#
 reg=0:m#
 adj=mean(reg[which(is.element(norwaydata[[i]]$years,1970:1999))])#
reg=reg-adj#
	newdata=norwaydata[[i]]$data+gia.NO[i]*reg#
plot(range(norwaydata[[i]]$years),range(c(norwaydata[[i]]$data,newdata),na.rm=T),type="n",xlab="Year",ylab=norway[i,1])#
lines(norwaydata[[i]]$years,norwaydata[[i]]$data)#
lines(norwaydata[[i]]$years,newdata,col="red")#
}
sta.years=norwaydata[[20]]$years#
sta=norwaydata[[20]]$data#
sta.range=which(is.element(sta.years,1916:2013))#
sta.years=sta.years[sta.range] #
sta=sta[sta.range]#
norwaydata[[20]]=list(data=sta,years=sta,years)#
#
	#Check for missing years#
for(i in 1:N) print(c(i,sum(is.na(norwaydata[[i]]$data)),norwaydata[[i]]$years[1]))#
#
index=c(4,11,13,16,20)#sufficient data + having gia #
gia.NO=c(0.3,0.45,0.18,0.26,0.54)#
giase.NO=c(0.06,0.07,0.06,0.07,0.06)#
#
for(i in index)#
 {m=length(norwaydata[[i]]$data)-1#
 reg=0:m#
 adj=mean(reg[which(is.element(norwaydata[[i]]$years,1970:1999))])#
reg=reg-adj#
	newdata=norwaydata[[i]]$data+gia.NO[i]*reg#
plot(range(norwaydata[[i]]$years),range(c(norwaydata[[i]]$data,newdata),na.rm=T),type="n",xlab="Year",ylab=norway[i,1])#
lines(norwaydata[[i]]$years,norwaydata[[i]]$data)#
lines(norwaydata[[i]]$years,newdata,col="red")#
}
norwaydata[20]=list(data.frame((data=sta,years=sta,years)))
norwaydata[20]=list(data.frame((data=sta,years=sta.years)))
norwaydata[[20]]=list(data=sta,years=sta.years)
for(i in index)#
 {m=length(norwaydata[[i]]$data)-1#
 reg=0:m#
 adj=mean(reg[which(is.element(norwaydata[[i]]$years,1970:1999))])#
reg=reg-adj#
	newdata=norwaydata[[i]]$data+gia.NO[i]*reg#
plot(range(norwaydata[[i]]$years),range(c(norwaydata[[i]]$data,newdata),na.rm=T),type="n",xlab="Year",ylab=norway[i,1])#
lines(norwaydata[[i]]$years,norwaydata[[i]]$data)#
lines(norwaydata[[i]]$years,newdata,col="red")#
}
i
plot(c(0,50), c(0,0.25), xlab="Anomaly (cm)",ylab="Density",main="Esbjerg 2050 RCP 8.5",type="n")#
v1=apply(matrix(unlist(cis$pred),ncol=101,byrow=T),2,median)[year]#
segments(v1,0,v1,0.25,lwd=2)#
hist(mu[,year],xlim=c(0,50), breaks=(0:51), ylim=c(0,0.50),freq=FALSE,add=T,lwd=2)#
#
lines(x,Fmix.pdf(x,matrix(unlist(cis$pred),ncol=101,byrow=T)[,year],cis$sd.g[year]),col="red",lwd=2)#
lines(x,Fmix.pdf(x,matrix(unlist(cis$pred),ncol=101,byrow=T)[,year],cis$sd[year]),col="blue",lwd=2)
setwd("~/GitHub/SeaLevelDecisions/code")#
require(maps)#
require(maptools)#
require(ncdf4)#
require(forecast)#
require(excursions)#
require(Matrix)#
require(chron)#
require(zoo)#
source('~/GitHub/SeaLevelProjections/Sealevel_functions.R')#
source('~/GitHub/SeaLevelDecisions/code/ci_bergen.R')#
denmark=read.table("~/GitHub/SeaLevelProjections/denmark_sea_level/denmark.PSMSL.txt")#All Danish sea level stations with current data]#
#from PSMSL.org#
denmark[,1]=as.character(denmark[,1])#
#
denmarkurl=paste("http://www.psmsl.org/data/obtaining/rlr.monthly.data/",denmark[,2],".rlrdata",sep="")#
#
N=length(denmark[,2])#
denmarkdata=list(N,NULL)#
for(i in 1:N){#
#
	tmp=read.table(denmarkurl[i],na.strings="-99999",sep=";")#
	tmp=cbind(floor(tmp[,1]),round(12*(tmp[,1]-floor(tmp[,1]))+.5),tmp[,2:4])#
#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[1,2]>1) tmp=tmp[-(1:(13-tmp[1,2])),]#start at first full year#
	if(tmp[N,2]<12) tmp=tmp[-((N+1-tmp[N,2]):N),]#delete final year if not full#
	tmp.rlr=tmp[,3]#
	tmp.rlr=matrix(tmp.rlr,ncol=12,byrow=T)#
	tmp.mp=medpolish(tmp.rlr,na.rm=T)#
	tmp.mppred=(tmp.mp$overall+outer(tmp.mp$row,tmp.mp$col,"+"))#
	for(j in 1:12) tmp.rlr[which(is.na(tmp.rlr[,j])),j]=tmp.mppred[which(is.na(tmp.rlr[,j])),j]#
	tmp.ann=apply(tmp.rlr,1,"mean")/10 #cm#
	tmp.yrs=unique(floor(tmp[,1]))#
	tmp.ann=tmp.ann-mean(tmp.ann[which(is.element(tmp.yrs,1970:1999))],na.rm=T)#
	denmarkdata[i]=list(data.frame(years=unique(floor(tmp[,1])),data=tmp.ann))#
	}#
	gia.DK=giase.DK=rep(NA,N)#
	index=c(1,2,4,5,6,14) #with gia #
	gia.DK[index]=c(-.012,-.306,-.028,-.009,-.010,0.06)#
	giase.DK[index]=c(.01,.14,.008,.01,.01,.02)#
#
#Get global model, data and CMIP5 output #
load('~/GitHub/SeaLevelProjections/data&global.Rdata')#
#
pdf("esbjerg_90.pdf")#
par(mfrow=c(1,2),pty="s")#
i=14#
m=length(denmarkdata[[i]]$data)-1#
 reg=0:m#
 adj=mean(reg[which(is.element(denmarkdata[[i]]$years,1970:1999))])#
reg=reg-adj#
	newdata=denmarkdata[[i]]$data+gia.DK[i]*reg#
	xlim=range(denmarkdata[[i]]$years)#
	ylim=range(c(denmarkdata[[i]]$data,newdata))#
#
plot(xlim,ylim,type="n",xlab="Year",ylab="Sea level anomaly (cm)")#
lines(denmarkdata[[i]]$years,denmarkdata[[i]]$data,lwd=2)#
lines(denmarkdata[[i]]$years,newdata,lwd=2,col="red")#
#
	sta=list(data=denmarkdata[[i]]$data,name=denmark[i,1],years=denmarkdata[[i]]$years,gia=gia.DK[i],se.gia=giase.DK[i])#
	####
### Estimate local relationship from data#
####
#
#common years to use for estimating local relationship#
#
tmp=intersect(sta$years,seal$years)#
sea.common.years=which(is.element(seal$years,tmp)) #
sta.common.years=which(is.element(sta$years,tmp))#
#
sta.un=sta$data #uncorrected station series#
stafit=arsta(seal,sta)#
#
summary(stafit$ar)#
#
plot(seal$sealevel[sea.common.years],stafit$data[sta.common.years],xlab="Global sea level anomaly (cm)",ylab="Local sea level anomaly (cm)")#
#
order=stafit$ar$arma[1]+stafit$ar$arma[2]#
ifelse(length(stafit$ar$coef)-order==1,#
{#
a3= 0 #intercept 0#
a4 = stafit$ar$coef[order+1] #
} #
,#
{#
	a3=stafit$ar$coef[order+1]#
a4=stafit$ar$coef[order+2] })#
#
abline(a3,a4,lwd=2)#
models=models8.5#
K=length(models) #
begin=max(min(sta.common.years),which(is.element(sta$years,1950)))#index of1950 or earliest available date thereafter#
alpha=0.1#
cis=ci_bergen(models,sta,stafit,sta.common.years,alpha)#
par(mfrow=c(1,1))#
	xlim=c(1950,2100)#
	ylim=c(-25,115)#
#
par(mfrow=c(1,1))#
plot(xlim,ylim,xlim=xlim,ylim=ylim,type='n',xlab="Year",	ylab="Anomaly (cm)",main="RCP 8.5")#
lines(sta$years[begin:max(sta$years)],sta$data[begin:max(sta$years)],col='blue')#
#
for(ii in 1:K){#
	lines(2000:2100,cis$pred[[ii]],col=2,lwd=0.5)#
}#
#
lines(2000:2100,cis$res$b,lwd=2)#
lines(2000:2100,cis$res$a,lwd=2)#
lines(2000:2100,cis$res$a.marginal,col="purple",lty=3)#
lines(2000:2100,cis$res$b.marginal,col="purple",lty=3)#
#
F.20 = F.40 = rep(0,101)#
for(k in 1:K){#
	F.20 = F.20 + cis$res.20[[k]]$F/K#
	F.40 = F.40 + cis$res.40[[k]]$F/K#
}#
#
plot(range(2000,2100),c(0,1),type="n",col=1,xlab="Year",ylab="Probability",main="P(Y(s)<20, s<t)")#
lines(2000:2100,F.20,col=4,lwd=2)#
lines(2000:2100,F.40,col=2,lwd=2)#
legend(2000,0, c("20 cm","40 cm"), #
lty=c(1,1), lwd=c(2.5,2.5),col=c(2,4),xjust=0,yjust=0) #
mu=NULL#
for (i in 1:K)#
mu=rbind(mu,cis$pred[[i]])#
x = seq(from=0,to=50,length.out = 1000)#
year = 51#
plot(c(0,50), c(0,0.25), xlab="Anomaly (cm)",ylab="Density",main="Esbjerg 2050 RCP 8.5",type="n")#
v1=apply(matrix(unlist(cis$pred),ncol=101,byrow=T),2,median)[year]#
segments(v1,0,v1,0.25,lwd=2)#
hist(mu[,year],xlim=c(0,50), breaks=(0:51), ylim=c(0,0.50),freq=FALSE,add=T,lwd=2)#
#
lines(x,Fmix.pdf(x,matrix(unlist(cis$pred),ncol=101,byrow=T)[,year],cis$sd.g[year]),col="red",lwd=2)#
lines(x,Fmix.pdf(x,matrix(unlist(cis$pred),ncol=101,byrow=T)[,year],cis$sd[year]),col="blue",lwd=2)#
dev.off()
q()
